// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Cqicd
NumericVector Cqicd(NumericVector Y, NumericMatrix X, NumericVector beta_in, double tau, int intercept, double lambda, int model, double a, double threshod, int maxint);
RcppExport SEXP _qrLOFT_Cqicd(SEXP YSEXP, SEXP XSEXP, SEXP beta_inSEXP, SEXP tauSEXP, SEXP interceptSEXP, SEXP lambdaSEXP, SEXP modelSEXP, SEXP aSEXP, SEXP threshodSEXP, SEXP maxintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_in(beta_inSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type threshod(threshodSEXP);
    Rcpp::traits::input_parameter< int >::type maxint(maxintSEXP);
    rcpp_result_gen = Rcpp::wrap(Cqicd(Y, X, beta_in, tau, intercept, lambda, model, a, threshod, maxint));
    return rcpp_result_gen;
END_RCPP
}
// BicVal
double BicVal(NumericVector Y, NumericMatrix X, NumericVector beta_in, double tau, int intercept, double C);
RcppExport SEXP _qrLOFT_BicVal(SEXP YSEXP, SEXP XSEXP, SEXP beta_inSEXP, SEXP tauSEXP, SEXP interceptSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_in(beta_inSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(BicVal(Y, X, beta_in, tau, intercept, C));
    return rcpp_result_gen;
END_RCPP
}
// PrecisionMat
NumericMatrix PrecisionMat(NumericMatrix Xs, NumericMatrix Xsc);
RcppExport SEXP _qrLOFT_PrecisionMat(SEXP XsSEXP, SEXP XscSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xsc(XscSEXP);
    rcpp_result_gen = Rcpp::wrap(PrecisionMat(Xs, Xsc));
    return rcpp_result_gen;
END_RCPP
}
// MMuhat
double MMuhat(NumericMatrix Xs, NumericMatrix Xsc, NumericMatrix Beta);
RcppExport SEXP _qrLOFT_MMuhat(SEXP XsSEXP, SEXP XscSEXP, SEXP BetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xsc(XscSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta(BetaSEXP);
    rcpp_result_gen = Rcpp::wrap(MMuhat(Xs, Xsc, Beta));
    return rcpp_result_gen;
END_RCPP
}
// MSighat
double MSighat(NumericMatrix Xs, NumericMatrix Xsc);
RcppExport SEXP _qrLOFT_MSighat(SEXP XsSEXP, SEXP XscSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xsc(XscSEXP);
    rcpp_result_gen = Rcpp::wrap(MSighat(Xs, Xsc));
    return rcpp_result_gen;
END_RCPP
}
// QRlof
NumericVector QRlof(NumericMatrix X, NumericVector Y, double tau, int intercept, int B, int Cret);
RcppExport SEXP _qrLOFT_QRlof(SEXP XSEXP, SEXP YSEXP, SEXP tauSEXP, SEXP interceptSEXP, SEXP BSEXP, SEXP CretSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type Cret(CretSEXP);
    rcpp_result_gen = Rcpp::wrap(QRlof(X, Y, tau, intercept, B, Cret));
    return rcpp_result_gen;
END_RCPP
}
// qrmm
NumericVector qrmm(NumericMatrix X, NumericVector Y, double tau);
RcppExport SEXP _qrLOFT_qrmm(SEXP XSEXP, SEXP YSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(qrmm(X, Y, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qrLOFT_Cqicd", (DL_FUNC) &_qrLOFT_Cqicd, 10},
    {"_qrLOFT_BicVal", (DL_FUNC) &_qrLOFT_BicVal, 6},
    {"_qrLOFT_PrecisionMat", (DL_FUNC) &_qrLOFT_PrecisionMat, 2},
    {"_qrLOFT_MMuhat", (DL_FUNC) &_qrLOFT_MMuhat, 3},
    {"_qrLOFT_MSighat", (DL_FUNC) &_qrLOFT_MSighat, 2},
    {"_qrLOFT_QRlof", (DL_FUNC) &_qrLOFT_QRlof, 6},
    {"_qrLOFT_qrmm", (DL_FUNC) &_qrLOFT_qrmm, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_qrLOFT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
